version: '3.1'

services: 
  
  event-store:
    image: eventstore/eventstore
    restart: always
    container_name: eventstore
    hostname: ${EVENTSTOREHOST}
    networks:
      - engaze-network
    volumes:
      - 'eventowrite_eventstore_db:/usr/share//eventowrite/data/db'
      - 'eventowrite_eventstore_log:/usr/share//eventowrite/data/log' 
    ports:
      - "2113:2113"
      - "1113:1113"  
    environment:
      - EVENTSTORE_RUN_PROJECTIONS=ALL
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      
  evento-zoo:
    image: zookeeper
    restart: always
    container_name: eventozoo
    hostname: ${ZOOKEEPERHOST}
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888
    networks:
      - engaze-network
    volumes:
      - 'zookeeper_data:/usr/share/zookeeper'
 
  evento-kafka:
    image: 'bitnami/kafka:0'
    container_name: eventokafka
    hostname: ${KAFKAHOST}
    ports:
      - '9092:9092'
    volumes:
      - 'kafka_data:/usr/share//kafka'
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=${ZOOKEEPERHOST}:2181
      - KAFKA_NUM_PARTITIONS=3
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CREATE_TOPICS:evento:3:1:compact     
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKAHOST}:9092 #ipaddress of the host machine, to access outside 
      #container update the host file and map localhost to ${KAFKAHOST} i.e evento-kafka
      
    depends_on:
      - evento-zoo 
    networks:
      - engaze-network 
      
  eventowrite:
    image: engaze/eventowrite
    entrypoint: /bin/bash -c "echo 'Waiting for event-store to up and running' && sleep 30 && dotnet Engaze.Evento.API.dll" 
    restart: always
    container_name: eventowrite
    hostname: ${EVENTOWRITEHOST}
    ports:
      - '5000:5000'
    volumes:
      - 'eventowrite_api:/usr/share//eventowrite/log'
    environment:     
      - EVENTSTORE_CONNSTRING=${EVENTSTORECONNSTRING}
      - NETCORE_ENVIRONMENT=${ENVIRONMENT}
    networks:
      - engaze-network
    depends_on:
      - event-store
      
  eventosubscriber:
    image: engaze/eventosubscriber
    entrypoint: /bin/bash -c "echo 'Waiting for event-store and kafka to up and running' && sleep 60 && dotnet Engaze.EventSubscriber.Service.dll"
    restart: always
    container_name: eventosubscriber   
    volumes:
      - 'eventosubscribe:/usr/share//eventosubscribe/log'
    environment:     
      - EVENTSTORE_CONNSTRING=${EVENTSTORECONNSTRING}
      - NETCORE_ENVIRONMENT=${ENVIRONMENT}
    networks:
      - engaze-network
    depends_on:
      - event-store
      - evento-kafka      
  
networks:
  engaze-network:
    driver: bridge
    
volumes:
  eventowrite_api:
  eventosubscribe:
  eventowrite_eventstore_db:
  eventowrite_eventstore_log:
  kafka_data:
  zookeeper_data: